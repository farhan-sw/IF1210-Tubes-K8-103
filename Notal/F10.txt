PROSEDUR AMBIL LAPORAN CANDI          
precedure ambillaporancanndi(INPUT data_candi : array of array of string, INPUT NMax : integer, OUTPUT string)
    { I.S. data_candi terdefinisi dan NMax terdefinisi }
    { F.S. Menampilkan data laporan candi ke terminal }

KAMUS LOKAL
    total_bahan     : integer
    idcandi         : array of array of string
    length          : integer
    harga_termahal  : string
    termahal        : string
    harga_termurah  : string
    termurah        : string

ALGORITMA
    { hitung total candi }
    output("> Total Candi: ", dataModule.hitungCandi(data_candi, NMax))

    { hitung total bahan yang digunakan }
    total_bahan <- hitung_bahan(data_candi, NMax)
    output("> Total Pasir yang digunakan: ", total_bahan[0])
    output("> Total Batu yang digunakan: ", total_bahan[1])
    output("> Total Air yang digunakan: ", total_bahan[2])

    { mencari id candi termahal dan termurah }
    idcandi <- [['' for i traversal [0 ... 2]] for i traversal [0 ... NMax]]     { matriks indeks kolom 0 data jin, 1 jumlah candi }

    { hitung harga tiap candi }
    i traversal [1 ... NMax]
        if data_candi[i][0] != "*" and data_candi[i][1] != "*" and data_candi[i][2] != "*" and data_candi[i][3] != "*" and data_candi[i][4] != "*" then
            idcandi[i-1][0] <- i
            idcandi[i-1][1] <- (int(data_candi[i][2])*10000) + (int(data_candi[i][3])*15000) + (int(data_candi[i][4])*7500)
    
    { update letak baris dalam matriks berdasar harga candi }
    length <- commands.countMatriks (idcandi, NMax, '')
    i traversal [0 ... length]
        j traversal [0 ... length-1-i]
            if idcandi[j][1] < idcandi[j+1][1] then
                idcandi[j], idcandi[j+1] <- idcandi[j+1], idcandi[j]

    { update letak baris dalam matriks berdasar id candi }
    j traversal [1 ... length]
        if idcandi[j][1] = idcandi[0][1] then
            if idcandi[j][0] < idcandi[0][0] then
                idcandi[0], idcandi[j] <- idcandi[j], idcandi[0]
    j traversal [length-2 ... 0]
        if idcandi[j][1] = idcandi[length-1][1] then
            if idcandi[j][0] < idcandi[length-1][0] then
                idcandi[j], idcandi[length-1] <- idcandi[length-1], idcandi[j]
    
    { candi termahal }
    harga_termahal <- f"(Rp {idcandi[0][1]})"
    termahal <- idcandi[0][0]
    if idcandi[0][0] = '' then
        termahal <- '-'
        harga_termahal <- ''
    output(f"> ID Candi Termahal: {termahal} {harga_termahal}" )

    { candi termurah }
    harga_termurah <- f"(Rp {idcandi[length-1][1]})"
    termurah <- idcandi[length-1][0]
    if idcandi[length-1][0] = '' then
        termurah <- '-'
        harga_termurah <- ''
    output(f"> ID Candi Termurah: {termurah} {harga_termurah}")

FUNGSI HITUNG BAHAN               
function hitung_bahan(data_candi : array of array of string, NMax : integer) -> (total_pasir : integer, total_batu : integer, total_air : integer)
    { INPUT   : array or array str berisikakn data candi }
    { OUTPUT  : int total_pasir, total_batu dan total_air }

KAMUS LOKAL
    total_pasir : integer
    total_batu  : integer
    total_air   : integer

ALGORITMA
    { Hitung total pasir, total batu dan total air di database }
    total_pasir <- 0
    total_batu <- 0
    total_air <- 0
    length <- commands.countMatriks (data_candi, NMax, '*')
    i traversal [1 ... length]
        total_pasir <- total_pasir + int(data_candi[i][2])
        total_batu <- total_batu + int(data_candi[i][3])
        total_air <- total_air + int(data_candi[i][4])
    return (total_pasir, total_batu, total_air)