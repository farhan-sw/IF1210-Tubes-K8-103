PROSEDUR AMBIL LAPORAN JIN           
procedure ambillaporanjin(INPUT data_candi : list[list[str]], INPUT NMax_candi : int, INPUT data_bahan : list[list[str]], INPUT data_username : list[list[str]], INPUT NMax_username : int, OUTPUT str) 

    { I.S. data_candi terdefinisi, NMax_candi terdefinisi, data_bahan terdefinisi data_username terdefinisi dan NMax_username terdefinisi }
    { F.S. Menampilkan data laporan jin ke terminal }

KAMUS LOKAL
    total_jin_pengumpul : integer
    total_jin_pembangun : integer
    total_jin           : integer
    jumlah_candi        : array of array of string
    length              : integer
    terajin             : string
    termalas            : string

          
    funcion hitungjin(role : str, data_user : list[list[str]], NMax_user : int) -> (total_jin : int)
    { menghitung jumlah jin dari suatu role tertentu dari data user dan mengeluarkan integer }

ALGORITMA
    { -------------- Hitung berapa total jin, jin pengumpul dan jin pembangun yang ada ---------------------- }
    
    { Hitung yang memiliki role jin_pengumpul di database }
    total_jin_pengumpul <- hitungJin('jin_pengumpul', data_username, NMax_username)

    { Hitung yang memiliki role jin_pembangun di database }
    total_jin_pembangun <- hitungJin('jin_pembangun', data_username, NMax_username)

    { Hitung total jin }
    total_jin           <- total_jin_pengumpul + total_jin_pembangun

    output("\n> Total Jin: ", total_jin)
    output("> Total Jin Pengumpul: ", total_jin_pengumpul)
    output("> Total Jin Pembangun: ", total_jin_pembangun)

    { -------------- cari jin terajin dan jin termalas ---------------------- }

    jumlah_candi    <- [['' for i traversal [0 ... 2]] for i traversal [0 ... NMax_candi]]  { matriks indeks kolom 0 data jin, 1 jumlah candi }

    { update nilai matriks kolom 1 }
    i traversal [0 ... NMax_candi]
        jumlah_candi[i][1] <- 0

    { update nama jin pengumpul, cari jin pengumpul }
    i traversal [0 ... NMax_candi]
        if (data_username[i][2] = 'jin_pembangun') then
            jumlah_candi[i][0] <- data_username[i][0]

    { update data jumlah candi yang dibangun }
    i traversal [0 ... NMax_candi]
        j traversal [0 ... NMax_candi]
            if (jumlah_candi[i][0] = data_candi[j][1]) then
                jumlah_candi[i][1] <- jumlah_candi[i][1] + 1
         
    { update letak baris dalam matriks berdasar jumlah candi yang dibangun }
    i traversal [0 ... NMax_candi]
        j traversal [0 ... NMax_candi-1-i]
            if (jumlah_candi[j][1] < jumlah_candi[j+1][1]) then
                jumlah_candi[j], jumlah_candi[j+1] <- jumlah_candi[j+1], jumlah_candi[j]

    { update letak baris dalam matriks berdasar abjad nama jin pembangun }
    length <- commands.countMatriks(jumlah_candi, NMax_candi, '')
    j traversal [1 ... length]  
        if (jumlah_candi[j][1] = jumlah_candi[0][1]) then
            if (jumlah_candi[j][0] < jumlah_candi[0][0]) then
                jumlah_candi[0], jumlah_candi[j] <- jumlah_candi[j], jumlah_candi[0]
    j traversal [length-2 ... 0]
        if (jumlah_candi[j][1] = jumlah_candi[length-1][1]) then
            if (jumlah_candi[j][0] < jumlah_candi[length-1][0]) then
                jumlah_candi[j], jumlah_candi[length-1] <- jumlah_candi[length-1], jumlah_candi[j]
           
    { ambil nilai jin terajin }
    terajin <- jumlah_candi[0][0]
    if (jumlah_candi[0][0] = '') then
        terajin <- '-'
    output("> Jin Terajin: ", terajin) 

    { ambil nilai jin termalas }
    termalas <- jumlah_candi[length-1][0]
    if (jumlah_candi[0][1] = jumlah_candi[length-1][1]) then
        termalas <- '-'
    elif (jumlah_candi[length-1][0] = '') then
        termalas <- '-'
    output("> Jin Termalas: ", termalas)

    { -------------- cari jumlah pasir, air, dan batu ---------------------- }
    output("> Jumlah Pasir: ", data_bahan[1][2])
    output("> Jumlah Air: ", data_bahan[3][2])
    output("> Jumlah Batu: ", data_bahan[2][2])

FUNGSI HITUNG JIN                 
function hitungjin(role : str, data_user : list[list[str]], NMax_user : int) -> (total_jin : int)
    { INPUT   : role dari jin yang ingin dihitung dan data username }
    { OUTPUT  : int jumlah jin yang ingin dihitung }

KAMUS LOKAL
    total_jin <- int

ALGORITMA
    { Hitung yang memiliki role jin yang dicari di database }
    total_jin <- 0
    i traversal [1 ... NMax_user]
        if data_user[i][0] != "*" and data_user[i][1] != "*" and data_user [i][2] == role then
            total_jin <- total_jin + 1
    return total_jin