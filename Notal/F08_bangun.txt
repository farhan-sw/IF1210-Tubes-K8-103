function  batchbangun (data_user : list[list[str]], NMax_user : int, data_candi : list[list[str]], NMax_candi : int, data_bahan : list[list[str]], NMax_bahan : int) -> (data_candi : list[list[str]], data_bahan : list[list[str]])
{ Input fungsi menerima data user, data candi, dan data bahan awal }
{ Output fungsi mengembalikan data candi dan data bahan yang telah dimodifikasi }

KAMUS LOKAL :
    total_cand      : int
    needsCandi      : array of array of integer
    needCandiTotal  : array of array of integer
    bahan_stok      : array of integer
    kurang_pasir    : int
    kurang_batu     : int
    kurang_air      : int
    isBelowTarget   : bool
    candi_target    : int
    candi_sekarang  : int
    candi_selisih   : int
    i       : int
    j       : int
    k       : int
    isDone  : bool
    next    : bool
    function countNeeds(total_candi : int) -> (bahan_random : array of array of int, bahan_random_total : array of int)
    { Menghitung berapa banyak bahan dari total_candi dan mengeluarkan tupple matiks bahan candi dan array detail bahan }
    function countMatriks (data: array, NMax : integer) -> integer
    { Menerima input matriks dan memberikan output banyaknya baris di matriks tersebut
    yang tidak kosong }

ALGORITMA UTAMA
    { Hitung Ada Berapa Candi yang akan dibangun }
    total_candi ← 0
    needsCandi ← [[0 i transversal [1 .. 3]] i tranversal [1]] // matriks indeks kolom 0 pasir, 1 batu, 2 air
    needCandiTotal ← [0 i tranversal(3)] // array indeks kolom 0 pasir, 1 batu, 2 air

    for i ← 0 to NMax_user-1 do
        if (data_user[i][2] = "jin_pembangun") then
            total_candi ← total_candi + 1

    if (total_candi = 0) then
        output("Bangun gagal. Anda tidak punya jin pembangun. Silahkan summon terlebih dahulu.")
    else
        needsCandi, needCandiTotal ← F06_Pembangun.countNeeds(total_candi)
        output("Mengerahkan", total_candi, " jin untuk membangun candi dengan total bahan", needCandiTotal[0], " pasir,", needCandiTotal[1], " batu, dan", needCandiTotal[2], " air.")

    { Kalkulasi Apakah Bahan Cukup }
    bahan_stok  ← [0 i tranversal [1 .. 3]] // array indeks kolom 0 pasir, 1 batu, 2 air
    kurang_pasir ← 0
    kurang_batu ← 0
    kurang_air ← 0

    i transversal [1 ... NMax_bahan ]
        if (data_bahan[i][0] = "pasir") then
        bahan_stok[0] ← int(data_bahan[i][2])

        if (data_bahan[i][0] = "batu") then
        bahan_stok[1] ← int(data_bahan[i][2])
    
        if (data_bahan[i][0] = "air") then
        bahan_stok[2] ← int(data_bahan[i][2])
   

    if (bahan_stok[0] - needCandiTotal[0] < 0 or bahan_stok[1] - needCandiTotal[1] < 0 or bahan_stok[2] - needCandiTotal[2] < 0) then 
    ((bahan_stok[0] - needCandiTotal[0]) < 0) then

        if((bahan_stok[0] - needCandiTotal[0] < 0) then
            kurang_pasir ← needCandiTotal[0] - bahan_stok[0]

        if (bahan_stok[1] - needCandiTotal[1] < 0) then
            kurang_batu ← needCandiTotal[1] - bahan_stok[1]

        if (bahan_stok[2] - needCandiTotal[2] < 0) then
            kurang_air ← needCandiTotal[2] - bahan_stok[2]
        
        output ("Bangun gagal. Kurang", kurang_pasir, " pasir,", kurang_batu, " batu, dan", kurang_air, " air.")
        -> (data_candi, data_bahan)  {Mengembalikan nilai tanpa perubahan (keluar dari fungsi)}
            
    { Hitung Sisa Candi }
    isBelowTarget   ← False
    candi_target    ← 100
    candi_sekarang  ← commands.countMatriks(data_candi, NMax_candi)
    candi_selisih   ← candi_target - candi_sekarang - total_candi

    if (candi_selisih > 0) then
        isBelowTarget   ← True
    else
        output("Candi akan melebihi target, tidak ada candi yang dibangun")
        -> (data_candi, data_bahan)  {Mengembalikan nilai tanpa perubahan (keluar dari fungsi)}

    { Lakukan Perubahan Data Bahan }
    if isBelowTarget then
        i transversal [1 .. NMax_bahan ]:
            if (data_bahan[i][0] = "pasir") then
                data_bahan[i][2] ← str(bahan_stok[0] - needCandiTotal[0])

            if (data_bahan[i][0] = "batu") then
                data_bahan[i][2] ← str(bahan_stok[1] - needCandiTotal[1])

            if (data_bahan[i][0] = "air") then
                data_bahan[i][2] ← str(bahan_stok[2] - needCandiTotal[2])
    
    { Lakukan Perubahan Data Candi }
    i ← 0
    j ← 0
    k ← 0
    isDone ← True
    next ← False

    while (i < total_candi) do
        next ← False
        while (next = False and j <= NMax_user) do
            if (data_user[j][2] = "jin_pembangun") then
                isDone = False
                while(isDone = False and k < NMax_candi) do
                    if (data_candi[k][0] = "*") then
                        data_candi[k][0] ← str(k)
                        data_candi[k][1] ← data_user[j][0]
                        data_candi[k][2] ← str(needsCandi[i][0])
                        data_candi[k][3] ← str(needsCandi[i][1])
                        data_candi[k][4] ← str(needsCandi[i][2])
                        isDone  ← True
                        next    ← True

                    k ← k + 1

            j ← j + 1

        i ← i + 1

    -> (data_candi, data_bahan)
