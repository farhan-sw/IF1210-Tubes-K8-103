FUNGSI BANGUN
function bangun(pembuat : str, data_candi : list[list[str]], NMax_candi : int, data_bahan : list[list[str]], NMax_bahan : int) -> (data_candi : list[list[str]], data_bahan : list[list[str]])
    { INPUT : pembuat : str, data_candi : list[list[str]], NMax_candi : int, data_bahan, NMax_bahan : int}
    { OUTPUT : data_candi : list[list[str]], data_bahan : list[list[str]]}

KAMUS LOKAL
    needsCandi      : array of array of integer
    needCandiTotal  : array of array of integer
    stok_pasir      : integer
    stok_batu       : integer
    stok_air        : integer
    isBelowTarget   : bool
    candi_target    : integer
    candi_sekarang  : integer
    candi_selisih   : integer
    i               : integer
    isDone          : bool

    function countNeeds(total_candi : int) -> (bahan_random : array of array of int, bahan_random_total : array of int)
    { Menghitung berapa banyak bahan dari total_candi dan mengeluarkan tupple matiks bahan candi dan array detail bahan }

ALGORITMA
    {Hitung kebutuhan candi sebanyak total_candi}
    needsCandi          <- [[0 for j transversal [0 ... 2]] for i transversal [0 ... 0]]
    needCandiTotal      <- [0 for i transversal [0 ... 2]]
    needsCandi, needCandiTotal <- countNeeds(1)     {Kebutuhan 1 candi}

    {Ambil data bahan tersedia}
    stok_pasir  <- 0
    stok_batu   <- 0
    stok_air    <- 0

    {Update pasir, cari lokasi pasir}
    i transversal [0 ... NMax_bahan-1]
        if (data_bahan[i][0] = "pasir") then
            stok_pasir      <- int(data_bahan[i][2])

    {Update batu, cari lokasi batu}
    i transversal [0 ... NMax_bahan-1]
        if (data_bahan[i][0] = "batu") then
            stok_batu       <- int(data_bahan[i][2])

    {Update air, cari lokasi air}
    i transversal [0 ... NMax_bahan-1]
        if (data_bahan[i][0] = "air") then
            stok_air        <- int(data_bahan[i][2])

    {Cek apakah bahan cukup}
    if ((stok_pasir - needCandiTotal[0] < 0) or (stok_batu - needCandiTotal[1] < 0) or (stok_air - needCandiTotal[2] < 0)) then
        output("Bahan bangunan tidak mencukupi.")
        output("Candi tidak bisa dibangun!")
        -> (data_candi, data_bahan) {return data tanpa perubahan}

    {Hitung Sisa Candi}
    isBelowTarget   <- False
    candi_target    <- 100
    candi_sekarang  <- commands.countMatriks(data_candi, NMax_candi)
    candi_selisih   <- candi_target - candi_sekarang

    if (candi_selisih > 0) then
        isBelowTarget     <- True

    {Lakukan Perubahan Data Bahan}
    if isBelowTarget then
        i transversal [0 ... NMax_bahan-1]
            if (data_bahan[i][0] = "pasir" then
                data_bahan[i][2] <- str(stok_pasir - needsCandi[0][0])

        i transversal [0 ... NMax_bahan-1]
            if (data_bahan[i][0] = "batu") then
                data_bahan[i][2] <- str(stok_batu - needsCandi[0][1])

        i transversal [0 ... NMax_bahan-1]
            if (data_bahan[i][0] = "air") then
                data_bahan[i][2] <- str(stok_air - needsCandi[0][2])

    {Lakukan Perubahan Data Candi}
    i <- 1
    isDone <- False
    while (isBelowTarget = True dan isDone = False dan i < NMax_candi) do
        if (data_candi[i][0] = "*") then
            data_candi[i][0] <- str(i)
            data_candi[i][1] <- pembuat
            data_candi[i][2] <- str(needsCandi[0][0])
            data_candi[i][3] <- str(needsCandi[0][1])
            data_candi[i][4] <- str(needsCandi[0][2])
            isDone <- True
        i <- i + 1

    {output Status Pembangunan}
    if isDone or isBelowTarget = False then
        output("Candi berhasil dibangun.")
    else:
        output("Terjadi kesalahan dalam pemasukkan candi")

    {output Sisa Candi yang perlu dibangun}
    if (candi_selisih > 0) then
        output("Sisa candi yang perlu dibangun:", candi_selisih, end=". \n")
    else:
        output("Sisa candi yang perlu dibangun: 0.")

    -> (data_candi, data_bahan)

function countNeeds(total_candi : int) -> (bahan_random : array of int, bahan_random_total : array of array of int)
{ Input fungsi menerima total_candi yang ingin dibangun }
{ Output fungsi mengembalikan tuple yang berisi matriks bahan_random dan array bahan_random_total }
    
KAMUS LOKAL :
    bahan_random        : array [1 .. 3] of array [1 .. total_candi ]of integer
    bahan_random_total  : array [1 .. 3] of integer
    function randomNumber(start : integer, stop : integer) -> integer
    { Mengembalikan nilai acak diantara start - stop }
    
ALGORITMA
    i transversal [1 .. total_candi]
        bahan_random[i][0]      <- B01_RNG.randomNumber(1, 5)       { Pasir }
        bahan_random_total[0]   <- bahan_random_total[0] + bahan_random[i][0]

        bahan_random[i][1]      <- B01_RNG.randomNumber(1, 5)       { Batu }
        bahan_random_total[1]   <- bahan_random_total[1] + bahan_random[i][1]

        bahan_random[i][2]      <- B01_RNG.randomNumber(1, 5)       { Air }
        bahan_random_total[2]   <- bahan_random_total[2] + bahan_random[i][2]

    return (bahan_random, bahan_random_total)
